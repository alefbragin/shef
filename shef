#!/bin/sh

PROGRAM=shef
VERSION=0.0.0

SHEF_STDIN_PATH="${SHEF_STDIN_PATH:-/dev/stdin}"
SHEF_RUNTIME_PATH="${SHEF_RUNTIME_PATH:-/run/user/$(id -u)/shef}" || exit 1
SHEF_INCLUDE_PATH="${SHEF_INCLUDE_PATH:-/usr/local/lib/shef}"

SHEF_LOCAL_RUNNER="${SHEF_LOCAL_RUNNER:-sh}"
SHEF_REMOTE_RUNNER="${SHEF_REMOTE_RUNNER:-ssh -T ${SHEF_REMOTE_USER}@${SHEF_REMOTE_HOST} -- sh}"

NL='
'

tr_arg() {
	tr "$1" "$2" << -EOF || die
		"$3"
	EOF
}

print_usage() {
	indent="$(tr_arg '[:print:]' ' ' "${PROGRAM}")" || die
	cat <<- EOF || die 'cannot print usage'
		Usage:
		  ${PROGRAM} --version | -V
		  ${PROGRAM} [--include-path=<path> | -I <path>]
		  ${indent} [--stdin-runner=<name> | -r <name>]
		  ${indent} [--] [<task>...]
	EOF
}

die() {
	if [ "$1" = --usage ]; then
		show_usage=yes && shift
	fi

	if [ $# -gt 0 ]; then
		format="$1" && shift
		printf "${PROGRAM}: ${format}\n" "$@" 1>&2

		if [ "${show_usage}" = yes ]; then
			echo 1>&2
		fi
	fi

	if [ "${show_usage}" = yes ]; then
		print_usage 1>&2
	fi

	exit 1
}

println() {
	printf '%s\n' "$1" || die
}

check_sanity() {
	LC_ALL=C grep --extended-regexp --quiet "$1" <<- EOF || die "$2: '%s'" "$3"
		$3
	EOF
}

find_task() {
	for task; do
		if [ "${task}" = - ]; then
			println "${SHEF_STDIN_PATH}"
		else
			find_result="$(find "${task}" -type f -name '*.sh')" \
				|| die "cannot find for the task path: '${task}'"
			[ -n "${find_result}" ] || die "there are no task files in the path: '${task_path}'"
			LC_ALL=C sort <<- EOF || die
				${find_result}
			EOF
		fi
	done
}

# TODO: Doc about hash per environment
##
# Search library by name and print it real path. If the library has already been found
# in a previous function call, the resulting real path will be empty.
#
# Arguments:
#	$1 Library name
# Globals:
#	$shef_library_path Resulting real path or empty string
# Dies if:
#	- bad library name
#	- cannot find library
##
search_library() {
	check_sanity '^[0-9a-z/-]+$' 'bad library name' "$1"

	hash_key="$(tr_arg '/-' 'S_' "shef_library_hashC$1")" \
		|| die 'cannot make hash key for the library'
	eval "hash_value=\"\${${hash_key}}\"" || die

	if [ "${hash_value}" = found ]; then
		shef_library_path=
		return 0
	fi

	IFS=:
	for path in "${shef_include_path}"; do
		shef_library_path="${path}/$1.sh"
		if [ -f "${shef_library_path}" ]; then
			eval "${hash_key}=found" || die
			return 0
		fi
	done

	die "cannot find library: '$1'"
}

include_libraries() {
	while IFS= read -r line; do
		println "${line}"
		case "${line#${line%%[![:blank:]]*}}" in
			\#.*)
				lib="$(
					sed 's/\(^[[:blank:]]*#\.[[:blank:]]*\|[[:blank:]]*$\)//g' <<- EOF
						"${line}"
					EOF
				)" || die

				search_library "${lib}"
				if [ -n "${shef_library_path}" ]; then
					include_libraries < "${shef_library_path}"
				fi
			;;
			\#*|'') continue ;;
			*) break ;;
		esac
	done
	cat
}

# TODO: Doc for descriptors
run_in_environment() {
	env_upper="$(tr_arg '[:lower:]' '[:upper:]' "$1")" \
		|| die 'cannot convert environment name to uppercase'

	eval "runner=\"\${SHEF_${env_upper}_RUNNER}\"" || die
	[ -n "${runner}" ] || die "no runner setup for the environment: '$1'"

	if [ ! -d "${SHEF_RUNTIME_PATH}" ]; then
		mkdir --parent "${SHEF_RUNTIME_PATH}" || die "cannot create run path: '${SHEF_RUNTIME_PATH}'"
	fi

	fifo="${SHEF_RUNTIME_PATH}/$$.$1.fifo"
	# TODO: Remove clashed old FIFO-file optionaly
	mkfifo "${fifo}" || die "cannot create temporary FIFO: '${fifo}'"
	exec 5<>"${fifo}" 6<"${fifo}" || die
	rm "${fifo}" || die "cannot remove temporary FIFO: '${fifo}'"

	while IFS= read -r env_file; do
		exec 4<&0 && exec 0<&3 || die
		include_libraries < "${env_file}"
		exec 0<&4 && exec 4<&- || die
	done <<- EOF >&5 &
		$2
	EOF

	exec 5>&- || die

	${runner} <&6 || die "cannot run task file by runner: '${runner}'"
	exec 6<&- || die

	wait $! || die 'subprocess for task preprocession fails'
}

file_env() {
	if [ "$1" = "${SHEF_STDIN_PATH}" ]; then
		[ -n "${shef_stdin_env}" ] || die 'no environment specified for the task from STDIN'
		shef_env="${shef_stdin_env}"
	else
		shef_env="${1%.sh}"
		shef_env="${shef_env##*[/.]}"
	fi
}

cmd_print_version() {
	[ $# -eq 0 ] || die --usage "extra argument: '%s'" "$@"
	printf 'shef version %s\n' "${VERSION}"
}

cmd_shef() {
	options="$(getopt \
		--options I:e: \
		--longoptions include-path:,stdin-environment: \
		-- "$@")" || die --usage

	eval set -- "${options}"

	shef_include_path="${SHEF_INCLUDE_PATH}"

	while :; do case "$1" in
		--include-path|-I)
			shef_include_path="$2:${shef_include_path}"
			shift 2
		;;
		--stdin-environment|-e)
			check_sanity '^[0-9a-z-]+$' 'bad environment name' "$2"
			shef_stdin_env="$2"
			shift 2
		;;
		--)
			shift
			break
		;;
	esac done

	files="$(find_task "${@:--}")" || die

	exec 3<&0
	if IFS= read -r file; then
		file_env "${file}"
		env_files="${file}"

		while IFS= read -r file; do
			prev_env="${shef_env}"
			file_env "${file}"

			if [ "${prev_env}" = "${shef_env}" ]; then
				env_files="${env_files}${NL}${file}"
			else
				run_in_environment "${prev_env}" "${env_files}"
				env_files="${file}"
			fi
		done

		run_in_environment "${shef_env}" "${env_files}"
	fi <<- EOF
		${files}
	EOF
	exec 3<&-
}

case "$1" in
	--version|-V) shift; cmd_print_version "$@" ;;
	--help) print_usage ;;
	*) cmd_shef "$@" ;;
esac
